import { Session } from 'next-auth';
import { UserProfile } from '@/types/profile';
import { generateSocialProfilesFromEmail } from '@/lib/utils/socialMedia';

/**
 * New User Service
 * Handles detection and orchestration of new user onboarding flow
 */

interface CreateDefaultProfileParams {
  session: Session;
}

interface DefaultProfileResult {
  profile: UserProfile;
  isNewUser: boolean;
}

/**
 * Detects if this is a new user based on session flags
 */
export function isNewUser(session: Session | null): boolean {
  if (!session?.user) return false;
  
  // Check NextAuth's new user flag (set during first sign-in)
  return (session as any).isNewUser === true;
}

/**
 * Creates a default profile for new users with auto-generated social media
 */
export function createDefaultProfile({ session }: CreateDefaultProfileParams): DefaultProfileResult {
  if (!session?.user) {
    throw new Error('Session required to create default profile');
  }

  // Generate social media profiles from email
  const socialProfiles = generateSocialProfilesFromEmail(session.user.email || '');

  const profile: UserProfile = {
    userId: session.user.id || '',
    name: session.user.name || '',
    bio: '', // Will be generated by AI service
    profileImage: session.user.image || '',
    backgroundImage: '', // Will be generated by AI service
    lastUpdated: Date.now(),
    contactChannels: {
      phoneInfo: {
        internationalPhone: '',
        nationalPhone: '',
        userConfirmed: false
      },
      email: {
        email: session.user.email || '',
        userConfirmed: !!session.user.email
      },
      facebook: socialProfiles.facebook,
      instagram: socialProfiles.instagram,
      x: socialProfiles.x,
      linkedin: socialProfiles.linkedin,
      snapchat: socialProfiles.snapchat,
      whatsapp: socialProfiles.whatsapp,
      telegram: socialProfiles.telegram,
      wechat: socialProfiles.wechat
    }
  };

  return {
    profile,
    isNewUser: true
  };
}

/**
 * Logs new user detection for debugging
 */
export function logNewUserDetection(session: Session | null, pathname: string): void {
  if (!session) return;

}
