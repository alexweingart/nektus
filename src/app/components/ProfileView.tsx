'use client';

import React, { useState, useEffect, useRef, useMemo } from 'react';
import { useProfile } from '../context/ProfileContext';
import { useSession } from 'next-auth/react';
import { LoadingSpinner } from './ui/LoadingSpinner';
import Link from 'next/link';
import { Button } from '@/ui/Button';
import Avatar from './ui/Avatar';
import SocialIcon from './ui/SocialIcon';
import { useAdminModeActivator } from './ui/AdminBanner';
import type { UserProfile } from '../context/ProfileContext';
import ReactMarkdown from 'react-markdown';
import { Heading, Text } from './ui/typography';

// Removed unused HARDCODED_PROFILE

// Single instructional placeholder bio
const PLACEHOLDER_BIO = 'Generating your personalized bio...';

const getPlaceholderBio = () => {
  return PLACEHOLDER_BIO;
};

// Removed unused ExtendedUserProfile type

const ProfileView: React.FC = () => {
  const { data: session } = useSession();
  const { profile } = useProfile();
  const [isLoading, setIsLoading] = useState(true);
  const adminModeProps = useAdminModeActivator(); // Get admin mode activation props
  
  // State for UI
  const [bio, setBio] = useState<string>('');
  
  // Reference to track if we've loaded the bio in this session
  const hasLoadedBio = useRef(false);
  
  // Initialize local profile with session data if available
  const [localProfile, setLocalProfile] = useState<UserProfile>(() => ({
    userId: session?.user?.id || `user-${Date.now()}`,
    name: session?.user?.name || 'New User',
    bio: '',
    profileImage: session?.user?.image || '/default-avatar.png',
    backgroundImage: '',
    lastUpdated: Date.now(),
    contactChannels: {
      phoneInfo: { internationalPhone: '', nationalPhone: '', userConfirmed: false },
      email: { 
        email: session?.user?.email || '', 
        userConfirmed: !!session?.user?.email 
      },
      facebook: { username: '', url: '', userConfirmed: false },
      instagram: { username: '', url: '', userConfirmed: false },
      x: { username: '', url: '', userConfirmed: false },
      whatsapp: { username: '', url: '', userConfirmed: false },
      snapchat: { username: '', url: '', userConfirmed: false },
      telegram: { username: '', url: '', userConfirmed: false },
      wechat: { username: '', url: '', userConfirmed: false },
      linkedin: { username: '', url: '', userConfirmed: false }
    }
  }));

  // Update local profile when the context profile changes
  useEffect(() => {
    if (profile) {
      setLocalProfile(prev => {
        // Improved bio preservation logic:
        // 1. Use profile.bio if it exists and is not empty
        // 2. Otherwise use the current bio state if it's not a placeholder
        // 3. Otherwise use prev.bio
        let bioToUse = prev.bio; // Default to previous bio
        
        if (profile.bio && profile.bio.trim() !== '') {
          bioToUse = profile.bio;
        } else if (bio && bio !== PLACEHOLDER_BIO) {
          bioToUse = bio;
        }
        
        // If we have a new bio to use, update the state
        if (bioToUse && bioToUse !== bio) {
          setBio(bioToUse);
          hasLoadedBio.current = true;
        }
        
        // Create the updated profile by carefully merging the profile data
        // while preserving the existing contact channels
        const updatedProfile = {
          ...prev,
          // Only update the bio if we have a new one to use
          ...(bioToUse ? { bio: bioToUse } : {}),
          // Update other profile fields
          name: profile.name || prev.name,
          profileImage: profile.profileImage || session?.user?.image || prev.profileImage || '/default-avatar.png',
          backgroundImage: profile.backgroundImage || prev.backgroundImage,
          lastUpdated: profile.lastUpdated || prev.lastUpdated,
          // Preserve all existing contact channels and merge with any new ones
          contactChannels: {
            ...prev.contactChannels,
            ...(profile.contactChannels || {})
          }
        };
        
        return updatedProfile;
      });
    }
  }, [profile, session?.user?.image, bio]);
  


  // Handle loading state and bio generation
  useEffect(() => {
    const loadProfile = async () => {
      try {
        let currentProfile = profile;
        
        // If no profile in context, try loading from localStorage
        if (!currentProfile) {
          const savedProfile = localStorage.getItem('nektus_user_profile');
          if (savedProfile) {
            currentProfile = JSON.parse(savedProfile);
          }
        }

        // If we have a profile, update the state
        if (currentProfile) {
          setLocalProfile(currentProfile);
          
          // Set bio from profile if it exists
          if (currentProfile.bio) {

            setBio(currentProfile.bio);
            hasLoadedBio.current = true;
          } else {
            // The bio will be generated by ProfileContext if needed
            setBio(PLACEHOLDER_BIO);
          }
        }
      } catch (error) {
        console.error('Error loading profile:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadProfile();
  }, [profile]);

  // Effect to update bio state when profile changes
  useEffect(() => {
    // Only update bio if we have a non-empty profile bio and either:
    // 1. We haven't loaded a bio yet, or
    // 2. The current bio is the placeholder
    if (profile?.bio && (bio === PLACEHOLDER_BIO || !hasLoadedBio.current)) {

      setBio(profile.bio);
      hasLoadedBio.current = true;
    } else if (profile?.bio) {
      // We're not updating the bio because it already exists
    }
  }, [profile?.bio, bio]);

  // Handle loading state
  useEffect(() => {
    if (profile) {
      setIsLoading(false);
    }
  }, [profile]);

  // Important: This must be before any conditional returns to avoid breaking React's rules of hooks
  const bioContent = useMemo(() => {
    return bio || getPlaceholderBio();
  }, [bio]);

  if (isLoading || !profile) {
    return (
      <div className="flex justify-center items-center min-h-screen bg-gradient-to-b from-green-400 to-blue-500">
        <LoadingSpinner size="lg" className="text-white" />
      </div>
    );
  }

  return (
    <div 
      className="min-h-screen flex flex-col items-center px-4 py-6"
      style={{
        backgroundImage: localProfile.backgroundImage ? `url(${localProfile.backgroundImage})` : 'none',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        backgroundColor: '#004D40' // Theme background color that shows while image loads
      }}
    >
      {/* Top Navigation Buttons */}
      <div className="w-full max-w-[var(--max-content-width,448px)] flex justify-between items-center mb-6 px-4">
        <Button 
          variant="circle"
          size="icon"
          className="w-12 h-12"
          onClick={() => {}}
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 fill-current" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd" />
          </svg>
        </Button>
        
        <Link href="/edit">
          <Button 
            variant="circle"
            size="icon"
            className="w-12 h-12"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 fill-current" viewBox="0 0 20 20">
              <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
            </svg>
          </Button>
        </Link>
      </div>
      
      <div className="w-full max-w-[var(--max-content-width,448px)] flex flex-col items-center">
        {/* Profile Image */}
        <div className="mb-4">
          <div className="border-4 border-white shadow-lg rounded-full">
            <Avatar 
              src={profile?.profileImage || localProfile?.profileImage} 
              alt={profile?.name || localProfile?.name || 'Profile'}
              size="lg"
            />
          </div>
        </div>
        
        {/* Content with blur background */}
        <div className="w-full bg-black/40 backdrop-blur-sm px-6 py-4 rounded-2xl" style={{ maxWidth: 'var(--max-content-width, 448px)' }}>
          {/* Profile Name - Double click to activate admin mode */}
          <div className="mb-3 text-center cursor-pointer" {...adminModeProps}>
            <Heading as="h1">{localProfile.name}</Heading>
          </div>
          
          {/* Bio with markdown support */}
          <div className="mb-4 text-center">
            <style>{`
              .bio-content a {
                color: #71E454; /* Using theme color */
                text-decoration: underline;
              }
              .bio-content a:hover {
                color: #5BBF45; /* Using theme dark color */
              }
            `}</style>
            <div className="bio-content text-white">
              <ReactMarkdown 
                components={{
                  p: ({node, ...props}) => <p className="text-sm text-white" {...props} />,
                  a: ({ node: _node, ...props }) => (
                    <a {...props} target="_blank" rel="noopener noreferrer" />
                  )
                }}
              >
                {bioContent}
              </ReactMarkdown>
            </div>
          </div>
          
          {/* Contact Icons */}
          <div className="w-full">
            {/* First row - 5 icons with equal spacing */}
            <div className="flex flex-wrap justify-center gap-4">
            {localProfile.contactChannels.facebook.username && (
              <a 
                href={`https://facebook.com/${localProfile.contactChannels.facebook.username}`} 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-white hover:text-blue-400 transition-colors"
              >
                <SocialIcon platform="facebook" username={localProfile.contactChannels.facebook.username} size="md" variant="white" />
              </a>
            )}
            
            {localProfile.contactChannels.instagram.username && (
              <a 
                href={`https://instagram.com/${localProfile.contactChannels.instagram.username}`} 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-white hover:text-pink-400 transition-colors"
              >
                <SocialIcon platform="instagram" username={localProfile.contactChannels.instagram.username} size="md" variant="white" />
              </a>
            )}
            
            {localProfile.contactChannels.x.username && (
              <a 
                href={`https://x.com/${localProfile.contactChannels.x.username}`} 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-white hover:text-gray-300 transition-colors"
              >
                <SocialIcon platform="x" username={localProfile.contactChannels.x.username} size="md" variant="white" />
              </a>
            )}
            
            {localProfile.contactChannels.whatsapp.username && (
              <a 
                href={`https://wa.me/${localProfile.contactChannels.whatsapp.username}`} 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-white hover:text-green-400 transition-colors"
              >
                <SocialIcon platform="whatsapp" username={localProfile.contactChannels.whatsapp.username} size="md" variant="white" />
              </a>
            )}
            
            {localProfile.contactChannels.snapchat.username && (
              <a 
                href={`https://www.snapchat.com/add/${localProfile.contactChannels.snapchat.username}`} 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-white hover:text-yellow-300 transition-colors"
              >
                <SocialIcon platform="snapchat" username={localProfile.contactChannels.snapchat.username} size="md" variant="white" />
              </a>
            )}
            
            {localProfile.contactChannels.telegram.username && (
              <a 
                href={`https://t.me/${localProfile.contactChannels.telegram.username}`} 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-white hover:text-blue-300 transition-colors"
              >
                <SocialIcon platform="telegram" username={localProfile.contactChannels.telegram.username} size="md" variant="white" />
              </a>
            )}
            
            {localProfile.contactChannels.wechat?.username && (
              <a 
                href={`weixin://dl/chat?${localProfile.contactChannels.wechat.username}`} 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-white hover:text-green-400 transition-colors"
              >
                <SocialIcon platform="wechat" username={localProfile.contactChannels.wechat.username} size="md" variant="white" />
              </a>
            )}
            
            {localProfile.contactChannels.linkedin.username && (
              <a 
                href={`https://linkedin.com/in/${localProfile.contactChannels.linkedin.username}`} 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-white hover:text-blue-300 transition-colors"
              >
                <SocialIcon platform="linkedin" username={localProfile.contactChannels.linkedin.username} size="md" variant="white" />
              </a>
            )}
            </div>
          </div>
        </div>
        
        {/* Action Buttons */}
        <div className="w-full mt-4" style={{ maxWidth: 'var(--max-content-width, 448px)' }}>
          <Link href="/connect" className="w-full">
            <Button 
              variant="theme"
              size="lg"
              className="w-full font-bold text-lg"
            >
              Nekt
            </Button>
          </Link>
        </div>
      </div>
    </div>
  );
};

export default ProfileView;
