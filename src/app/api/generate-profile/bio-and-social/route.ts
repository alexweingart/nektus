import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/options';
import { AdminProfileService } from '@/lib/firebase/adminProfileService';
import { BioAndSocialGenerationService } from '@/lib/services/bioAndSocialGenerationService';
import { UserProfile } from '@/types/profile';

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const userId = session.user.id;
    
    console.log(`[API/BIO-AND-SOCIAL] Starting unified generation for user ${userId}`);
    
    // Get current profile from Firebase
    let userProfile = await AdminProfileService.getProfile(userId);
    
    // If profile doesn't exist, create minimal profile from session
    if (!userProfile) {
      userProfile = {
        userId: userId,
        name: session.user.name || '',
        bio: '',
        profileImage: session.user.image || '',
        backgroundImage: '',
        lastUpdated: Date.now(),
        aiGeneration: {
          bioGenerated: false,
          backgroundImageGenerated: false,
          avatarGenerated: false
        },
        contactChannels: {
          phoneInfo: {
            internationalPhone: '',
            nationalPhone: '',
            userConfirmed: false
          },
          email: { 
            email: session.user.email || '', 
            userConfirmed: !!session.user.email 
          },
          facebook: { username: '', url: '', userConfirmed: false },
          instagram: { username: '', url: '', userConfirmed: false },
          x: { username: '', url: '', userConfirmed: false },
          linkedin: { username: '', url: '', userConfirmed: false },
          snapchat: { username: '', url: '', userConfirmed: false },
          whatsapp: { username: '', url: '', userConfirmed: false },
          telegram: { username: '', url: '', userConfirmed: false },
          wechat: { username: '', url: '', userConfirmed: false }
        }
      };
    }

    console.log(`[API/BIO-AND-SOCIAL] Profile info for user ${userId}:`, {
      name: userProfile.name,
      email: userProfile.contactChannels?.email?.email || 'none',
      hasPhone: !!userProfile.contactChannels?.phoneInfo?.internationalPhone,
      hasBio: !!userProfile.bio
    });
    
    // Generate both bio and social links using the unified service
    const result = await BioAndSocialGenerationService.generateBioAndSocialLinks(userProfile);
    
    console.log(`[API/BIO-AND-SOCIAL] Generation completed for user ${userId}:`, {
      success: result.success,
      bioLength: result.bio.length,
      socialProfilesDiscovered: result.socialProfilesDiscovered,
      socialProfilesVerified: result.socialProfilesVerified
    });
    
    // CRITICAL: Get fresh profile data before saving to prevent overwrites
    // This ensures we have the latest phone-based socials if they were generated in parallel
    const freshProfile = await AdminProfileService.getProfile(userId);
    if (!freshProfile) {
      console.error(`[API/BIO-AND-SOCIAL] Fresh profile not found for user ${userId}`);
      return NextResponse.json({ error: 'Profile not found' }, { status: 404 });
    }

    // Build merged contact channels preserving fresh phone-based data
    const mergedContactChannels = {
      // Always preserve fresh phone and email data
      phoneInfo: freshProfile.contactChannels?.phoneInfo || result.contactChannels.phoneInfo,
      email: freshProfile.contactChannels?.email || result.contactChannels.email,
      
      // Update only AI-discoverable platforms with generated results
      facebook: result.contactChannels.facebook,
      instagram: result.contactChannels.instagram,
      x: result.contactChannels.x,
      linkedin: result.contactChannels.linkedin,
      snapchat: result.contactChannels.snapchat,
      
      // Preserve fresh phone-based socials (may have been generated by PhoneBasedSocialService)
      whatsapp: freshProfile.contactChannels?.whatsapp || result.contactChannels.whatsapp,
      telegram: freshProfile.contactChannels?.telegram || result.contactChannels.telegram,
      wechat: freshProfile.contactChannels?.wechat || result.contactChannels.wechat
    };

    console.log(`[API/BIO-AND-SOCIAL] Using fresh profile data to prevent overwrites`, {
      freshPhone: freshProfile.contactChannels?.phoneInfo?.internationalPhone || 'none',
      freshWhatsApp: freshProfile.contactChannels?.whatsapp?.username || 'none',
      freshTelegram: freshProfile.contactChannels?.telegram?.username || 'none',
      generatedWhatsApp: result.contactChannels.whatsapp?.username || 'none',
      generatedTelegram: result.contactChannels.telegram?.username || 'none'
    });
    
    // Update profile in Firebase with merged data
    try {
      await AdminProfileService.updateProfile(userId, {
        bio: result.bio,
        contactChannels: mergedContactChannels,
        aiGeneration: {
          bioGenerated: true,
          avatarGenerated: freshProfile.aiGeneration?.avatarGenerated || false,
          backgroundImageGenerated: freshProfile.aiGeneration?.backgroundImageGenerated || false
        },
        lastUpdated: Date.now()
      });
      
      console.log(`[API/BIO-AND-SOCIAL] Profile updated in Firebase for user ${userId} with merged data`);
    } catch (saveError) {
      console.error(`[API/BIO-AND-SOCIAL] FAILED to save to Firebase for user ${userId}:`, saveError);
      // Still return the generated content even if save fails
      console.error('[API/BIO-AND-SOCIAL] Continuing to return generated content despite save failure');
    }
    
    return NextResponse.json({ 
      bio: result.bio,
      contactChannels: mergedContactChannels,
      success: result.success,
      socialProfilesDiscovered: result.socialProfilesDiscovered,
      socialProfilesVerified: result.socialProfilesVerified
    });
    
  } catch (error) {
    console.error('[API/BIO-AND-SOCIAL] Error in unified generation:', error);
    
    const message = error instanceof Error ? error.message : 'An unexpected error occurred.';
    return NextResponse.json(
      { error: 'Failed to generate bio and social links', details: message }, 
      { status: 500 }
    );
  }
} 