import GoogleProvider from "next-auth/providers/google";
import type { NextAuthOptions, DefaultSession, User, Account, Profile } from "next-auth";
import { JWT } from "next-auth/jwt";
import { AdapterUser } from "next-auth/adapters";
import type { Awaitable } from "next-auth";
import type { NextApiRequest, NextApiResponse } from "next";

// Extend the default session type
declare module "next-auth" {
  interface Session extends DefaultSession {
    accessToken?: string;
    user: {
      id: string;
      name?: string | null;
      email?: string | null;
      image?: string | null;
    };
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    accessToken?: string;
    refreshToken?: string;
    user?: User;
  }
}

// Type for the signIn callback parameters
interface SignInParams {
  user: User | AdapterUser;
  account: Account | null;
  profile?: Profile;
  email?: { verificationRequest?: boolean };
  credentials?: Record<string, any>;
}

// Type for the JWT callback parameters
interface JWTCallbackParams {
  token: JWT;
  user?: User | AdapterUser;
  account?: Account | null;
  profile?: Profile;
  isNewUser?: boolean;
}

// Type for the session callback parameters
interface SessionCallbackParams {
  session: any; // Using any to avoid type conflicts with extended Session
  token: JWT;
  user: User;
}

// Type for the redirect callback parameters
interface RedirectCallbackParams {
  url: string;
  baseUrl: string;
}

// Type for the logger methods
interface LoggerMethods {
  error: (code: string, metadata: any) => void;
  warn: (code: string) => void;
  debug: (code: string, metadata: any) => void;
}

// Helper to get environment variables with better error handling
const getEnv = (key: string): string => {
  const value = process.env[key];
  if (!value && process.env.NODE_ENV !== 'test') {
    // Log warning only in development mode
    if (process.env.NODE_ENV === 'development') {
      console.warn(`Missing environment variable: ${key}`);
    }
  }
  return value || '';
};

// Set NEXTAUTH_URL if not set
if (!process.env.NEXTAUTH_URL) {
  process.env.NEXTAUTH_URL = "http://localhost:3000";
}

// Get required environment variables with fallbacks
const NEXTAUTH_SECRET = getEnv('NEXTAUTH_SECRET');
const GOOGLE_CLIENT_ID = getEnv('GOOGLE_CLIENT_ID');
const GOOGLE_CLIENT_SECRET = getEnv('GOOGLE_CLIENT_SECRET');

// Extend the default session type
declare module "next-auth" {
  interface Session extends DefaultSession {
    accessToken?: string;
    user: {
      id: string;
      name?: string | null;
      email?: string | null;
      image?: string | null;
    };
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    accessToken?: string;
    refreshToken?: string;
    user?: User;
  }
}

// Only include Google provider if credentials are available
const providers: NonNullable<NextAuthOptions['providers']> = [];

// Define the AuthOptions type
type AuthOptions = NextAuthOptions & {
  providers: any[]; // Using any[] to avoid complex provider types
  callbacks: {
    signIn: (params: SignInParams) => Awaitable<boolean>;
    jwt: (params: JWTCallbackParams) => Awaitable<JWT>;
    session: (params: SessionCallbackParams) => Awaitable<any>;
    redirect: (params: RedirectCallbackParams) => Awaitable<string>;
  };
  events: {
    signIn: (params: { user: User; account: Account | null; profile?: Profile; isNewUser?: boolean }) => Awaitable<void>;
    signOut: () => Awaitable<void>;
  };
  logger: {
    error: (code: string, metadata: any) => void;
    warn: (code: string) => void;
    debug: (code: string, metadata: any) => void;
  };
};
if (GOOGLE_CLIENT_ID && GOOGLE_CLIENT_SECRET) {
  providers.push(
    GoogleProvider({
      clientId: GOOGLE_CLIENT_ID,
      clientSecret: GOOGLE_CLIENT_SECRET,
      authorization: {
        params: {
          prompt: "consent",
          access_type: "offline",
          response_type: "code",
          scope: 'openid email profile',
        },
      },
      httpOptions: {
        timeout: 10000, // 10 second timeout
      },
    }) as any // Type assertion needed due to provider type complexity
  );
}

// Extend the default session and user types
declare module "next-auth" {
  // Extend the built-in user type
  interface User {
    id: string;
    name?: string | null;
    email?: string | null;
    image?: string | null;
  }

  // Extend the built-in session type
  interface Session extends DefaultSession {
    accessToken?: string;
    user: User;
  }
}

export const authOptions: AuthOptions = {
  // Configure authentication providers
  providers,
  
  // Session configuration
  secret: NEXTAUTH_SECRET || 'your-secret-key-here-change-in-production',
  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, // 30 days
    updateAge: 24 * 60 * 60, // 24 hours
  },
  
  // Cookie settings
  useSecureCookies: process.env.NODE_ENV === "production",
  cookies: {
    sessionToken: {
      name: `${process.env.NODE_ENV === 'production' ? '__Secure-' : ''}next-auth.session-token`,
      options: {
        httpOnly: true,
        sameSite: 'lax',
        path: '/',
        secure: process.env.NODE_ENV === "production",
        domain: process.env.NODE_ENV === 'production' ? '.nekt.us' : undefined,
      },
    },
  },
  
  // Pages configuration
  pages: {
    signIn: "/setup",
    error: "/setup"
  },
  
  // Callbacks
  callbacks: {
    async signIn(params: SignInParams): Promise<boolean> {
      // Process sign in callback
      const { user, account, profile, email } = params;
      if (process.env.NODE_ENV === 'development') {
        console.log('Sign in:', user?.email);
      }
      return true;
    },
    async jwt({ token, user, account, profile }: {
      token: JWT;
      user?: User | AdapterUser;
      account?: Account | null;
      profile?: Profile;
    }): Promise<JWT> {
      // Initial sign in
      if (account && user) {
        return {
          ...token,
          accessToken: account.access_token,
          accessTokenExpires: account.expires_at ? account.expires_at * 1000 : undefined,
          refreshToken: account.refresh_token,
          user: {
            id: user.id,
            name: user.name || null,
            email: user.email || null,
            image: user.image || null,
          },
        };
      }

      // Return previous token if the access token has not expired yet
      if (token.accessTokenExpires && typeof token.accessTokenExpires === 'number' && Date.now() < token.accessTokenExpires) {
        return token;
      }

      // Access token has expired, try to update it
      // Note: You'll need to implement refreshAccessToken if using refresh tokens
      return token;
    },
    
    async session(params: SessionCallbackParams): Promise<any> {
      const { session, token } = params;
      if (token.user) {
        session.user = {
          ...session.user,
          id: token.user.id,
          name: token.user.name,
          email: token.user.email,
          image: token.user.image // Ensure the image is passed through
        };
        session.accessToken = token.accessToken;
      }
      return session;
    },
    
    async redirect(params: RedirectCallbackParams): Promise<string> {
      const { url, baseUrl } = params;
      // Allows relative callback URLs
      if (url.startsWith('/')) return Promise.resolve(`${baseUrl}${url}`);
      // Allows callback URLs on the same origin
      try {
        if (new URL(url).origin === baseUrl) return Promise.resolve(url);
      } catch (e) {
        // Invalid URL, return baseUrl
      }
      return Promise.resolve(baseUrl);
    },
  },
  
  // Events
  events: {
    async signIn(params: { user: User; account: Account | null; profile?: Profile; isNewUser?: boolean }) {
      if (process.env.NODE_ENV === 'development') {
        console.log('Sign in event:', params.user?.email);
      }
    },
    async signOut() {
      if (process.env.NODE_ENV === 'development') {
        console.log('User signed out');
      }
    },
  },
  
  // Debug mode
  debug: process.env.NODE_ENV === "development",
  
  // Logger configuration
  logger: {
    error(code: string, metadata: any) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Auth error:', code, metadata);
      }
    },
    warn(code: string) {
      if (process.env.NODE_ENV === 'development') {
        console.warn('Auth warning:', code);
      }
    },
    debug(code: string, metadata: any) {
      if (process.env.NODE_ENV === 'development') {
        console.debug('Auth debug:', code, metadata);
      }
    }
  } as const,
};
